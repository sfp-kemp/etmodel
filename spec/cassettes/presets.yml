---
http_interactions:
- request:
    method: get
    uri: https://beta-engine.energytransitionmodel.com/api/v3/scenarios/templates.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.14.0
      Date:
      - Tue, 09 Jul 2019 12:01:21 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      - Origin
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Permitted-Cross-Domain-Policies:
      - none
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Etag:
      - W/"5c9d57182ee7c860b9acc523c03893ff"
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Request-Id:
      - 84681316-90b2-4dc3-9702-f1a307b7179b
      X-Runtime:
      - '0.008041'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 09 Jul 2019 12:01:21 GMT
recorded_with: VCR 3.0.3
